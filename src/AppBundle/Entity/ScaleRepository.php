<?php

namespace AppBundle\Entity;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ScaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScaleRepository extends \Doctrine\ORM\EntityRepository
{


    public function findAllByEverything($search){

        $em = $this->getEntityManager();

        $repository = $em->getRepository('AppBundle:Scale');

        if(is_null($search)){
            $query = $repository->createQueryBuilder('s')->getQuery();
        }else{
        $query = $repository->createQueryBuilder('s')
            ->innerJoin('s.intervales', 'i')
            ->innerJoin('s.descriptors', 'd')
            ->where('s.name LIKE :name ')
            ->andWhere('i.id IN ( :intervales )')
            ->andWhere('d.id IN ( :descriptors )')
            ->setParameter('name',  "%".$search["name"]."%" )
            ->setParameter('descriptors',  $search["descriptors"] )
            ->setParameter('intervales',  $search["intervales"] )
            ->getQuery();
        }

        return $query->getResult();
    }
    /*
     *
     */
    public function matchingScale($intervales,$currentScaleId = 0){
        $sql = "

            SELECT scaleId,scaleName, scaleNbrTot/count(intervale_id) as ratio,count(intervale_id) as commonIntervale  FROM (
SELECT
s1.id as scaleId,
	s1.name as scaleName,
    si1.intervale_id,
    (SELECT COUNT(intervale_id) FROM scales_intervales WHERE scale_id=s1.id ) as scaleNbrTot
FROM
    scale s1
        LEFT JOIN
    scales_intervales si1 ON si1.scale_id = s1.id

    group by s1.id,si1.intervale_id

HAVING si1.intervale_id IN (:intervales)
)r1
group by scaleId
having commonIntervale >= :countIntervales and scaleId != :currentScaleId
order by ratio asc

            ";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('scaleId', 'scaleId');
        $rsm->addScalarResult('scaleName', 'scaleName');
        $rsm->addScalarResult('ratio', 'ratio');


        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameter("currentScaleId",$currentScaleId);
        $query->setParameter("intervales",$intervales);
        $query->setParameter("countIntervales",count($intervales));
        return $query->getScalarResult();
    }
    public function westernPopulateScale($scaleId){
        $sql = "

            SELECT
                name as rootName,
                digit as rootDigitId,
                (SELECT d2.value FROM digit d2 WHERE d2.id=digit) as rootDigitA,
                group_concat(newToneName order by intervaleDelta1) as toneList ,
                group_concat(newDigitA+36 order by intervaleDelta1) as digitAList
                FROM
                (
                SELECT
                    *,
                    (SELECT
                            ws3.name
                        FROM
                            western_system ws3
                        WHERE
                            ws3.intervale = intervaleId1
                                AND root = ws2.root limit 1) AS newToneName,
                    (SELECT
                            d1.value
                        FROM
                            western_system ws3
                        LEFT JOIN
                            digit d1 ON d1.id = ws3.digit
                        WHERE
                            ws3.intervale = intervaleId1
                                AND root = ws2.root limit 1) AS newDigitA
                FROM
                    (SELECT
                        s1.id AS scaleId1,
                            s1.name AS scaleName1,
                            i1.id AS intervaleId1,
                            i1.delta AS intervaleDelta1,
                            i1.color AS intervaleColor1
                    FROM
                        scale s1
                    LEFT JOIN scales_intervales si1 ON si1.scale_id = s1.id
                    LEFT JOIN intervale i1 ON i1.id = si1.intervale_id
                    WHERE
                        s1.id = :scaleId) r1
                        JOIN
                    western_system ws2 ON ws2.intervale = 1
                    )r2

                    group by root

            ";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('rootName', 'rootName');
        $rsm->addScalarResult('rootDigitA', 'rootDigitA');
        $rsm->addScalarResult('toneList', 'toneList');
        $rsm->addScalarResult('digitAList', 'digitAList');

        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameter("scaleId",$scaleId);
        return $query->getScalarResult();
    }
    public function ajaxFindAll(){
        $sql = "SELECT id,name FROM scale";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('name', 'name');

        $query = $em->createNativeQuery($sql, $rsm);
        return $query->getScalarResult();
    }
}

<?php

namespace AppBundle\Entity;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * InstrumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InstrumentRepository extends \Doctrine\ORM\EntityRepository
{


    public function findRootScaleByDigits($digits){

        $sql = "



SELECT
			(SELECT group_concat(descriptor_id) from scales_descriptors sd  where sd.scale_id=scaleId) as descriptorListId,
            (SELECT group_concat(d.name) from scales_descriptors sd left join descriptor d on d.id = sd.descriptor_id where sd.scale_id=scaleId) as descriptorListName,
            scaleId,scaleName,rootInfoTone,
            (SELECT name from western_system where intervale=1 and digit=rootDigitId order by abs(relativePosition) limit 1) as wsName,
            (SELECT id from western_system where intervale=1 and digit=rootDigitId order by abs(relativePosition) limit 1) as wsId,
            COUNT(i.id) AS toneCount,
            GROUP_CONCAT((SELECT value FROM digit WHERE id=(
            (SELECT digit from western_system where intervale=i.id AND root = (SELECT id from western_system where intervale=1 and digit=rootDigitId order by abs(relativePosition) limit 1) limit 1)
            ))) AS dList,
            GROUP_CONCAT((SELECT name from western_system where intervale=i.id AND root = (SELECT id from western_system where intervale=1 and digit=rootDigitId order by abs(relativePosition) limit 1) limit 1)) AS wsList,
            GROUP_CONCAT(i.name) AS intervaleNameList,
            GROUP_CONCAT(i.delta) AS intervaleDeltaList,
            GROUP_CONCAT(i.color) AS intervaleColorList
        FROM
            (SELECT
                    scaleId,
                    scaleName,
                    rootInfoTone,rootDigitId,
                    ROUND(COUNT(rootInfoTone) / totTone, 1) AS scoreInternal,
                    ROUND(COUNT(rootInfoTone) / :digitsCount, 1) AS scoreExternal
            FROM
                (SELECT
                    s1.id AS scaleId,
                    s1.name AS scaleName,
                    d1.infoTone AS rootInfoTone,
                    d1.value AS rootDigit,
                    d1.id AS rootDigitId,
                    (SELECT
                            value
                        FROM
                            digit
                        WHERE
                            value = MOD(d1.value + i1.delta, 12)) AS calculatedDigit,
                    i1.name AS intervaleName,
                    i1.delta AS intervaleDelta,
                    (SELECT
                            COUNT(si2.intervale_id)
                        FROM
                            scales_intervales si2
                        WHERE
                            si2.scale_id = scaleId) AS totTone
            FROM
                scale s1
            LEFT JOIN scales_intervales si1 ON si1.scale_id = s1.id
            LEFT JOIN intervale i1 ON i1.id = si1.intervale_id
            JOIN digit d1
            HAVING calculatedDigit IN (:digits)) r1
            GROUP BY scaleId , rootInfoTone
            HAVING scoreExternal = 1
            ORDER BY scoreInternal DESC , scoreExternal DESC) r2
                LEFT JOIN
            scales_intervales si ON si.scale_id = scaleId
                LEFT JOIN
            intervale i ON i.id = si.intervale_id


        GROUP BY scaleId , rootInfoTone
        HAVING toneCount = :digitsCount
        order by toneCount
;



";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;

        $rsm->addScalarResult('descriptorListName', 'descriptorListName');
        $rsm->addScalarResult('descriptorListId', 'descriptorListId');
        $rsm->addScalarResult('toneCount', 'toneCount');
        $rsm->addScalarResult('scoreInternal', 'scoreInternal');
        $rsm->addScalarResult('scoreExternal', 'scoreExternal');
        $rsm->addScalarResult('scaleId', 'scaleId');
        $rsm->addScalarResult('scaleName', 'scaleName');
        $rsm->addScalarResult('rootInfoTone', 'rootInfoTone');
        $rsm->addScalarResult('wsName', 'wsName');
        $rsm->addScalarResult('wsId', 'wsId');
        $rsm->addScalarResult('wsList', 'wsList');
        $rsm->addScalarResult('dList', 'dList');
        $rsm->addScalarResult('intervaleNameList', 'intervaleNameList');
        $rsm->addScalarResult('intervaleDeltaList', 'intervaleDeltaList');
        $rsm->addScalarResult('intervaleColorList', 'intervaleColorList');

        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameter('digits',$digits);
        $query->setParameter('digitsCount',count($digits));
        return $query->getScalarResult();

    }

    public function ajaxFindAll(){
        $sql = "SELECT id,name,icon FROM instrument";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('id', 'id');
        $rsm->addScalarResult('name', 'name');
        $rsm->addScalarResult('icon', 'icon');

        $query = $em->createNativeQuery($sql, $rsm);
        return $query->getScalarResult();
    }
    /*
     * SET @SCALE_ID := 2;
SET @INSTRUMENT_ID := 2;
SET @ROOT_DIGIT_ID := 1;
SET @ROOT_NAME := "C";


     */
    public function getMatriceRootScale($id,$r = null ,$s = null){
        $sql = "SELECT name,digit FROM western_system WHERE id = :id";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;

        $rsm->addScalarResult('name', 'name');
        $rsm->addScalarResult('digit', 'digit');

        $query = $em->createNativeQuery($sql, $rsm);
        $query->setParameter('id',$r);
        $ws = $query->getScalarResult();


        $sql = "
SELECT
    instrument.id AS instrumentId,
    instrument.name AS instrumentName,
    oneCase AS currentCase,
    instrument_string.pos AS currentString,
    ROUND(((12 * octave + (d2.value + oneCase)) - MOD((d2.value + oneCase), 12)) / 12) AS currentOctave,
    (12 * octave + (d2.value + oneCase)) AS currentDigitA,
    MOD((d2.value + oneCase), 12) AS currentDigit,
    (SELECT
            infoTone
        FROM
            digit
        WHERE
            value = MOD((d2.value + oneCase), 12)) AS currentInfoTone,
    IF(d.value = MOD((d2.value + oneCase), 12),
        i.name,
        NULL) AS currentIntervale,
        (select ws2.name from western_system ws2 where ws.id=ws2.root and ws2.intervale=i.id LIMIT 1) as wsName
FROM
    instrument instrument
        LEFT JOIN
    instrument_string instrument_string ON instrument_string.instrument = instrument.id
        JOIN
    (SELECT 0 oneCase UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24) virtualCase
        LEFT JOIN
    digit d2 ON instrument_string.digit = d2.id
        LEFT JOIN
    scale s ON s.id = :scaleId
        LEFT JOIN
    scales_intervales si ON s.id = si.scale_id
        LEFT JOIN
    intervale i ON i.id = si.intervale_id
        LEFT JOIN
    western_system ws ON ws.name = :wsName AND ws.intervale = 1
        LEFT JOIN
    digit d ON d.value = MOD((SELECT
                value
            FROM
                digit
            WHERE
                id = ws.digit) + i.delta,
        12)
WHERE
    instrument.id = :instrumentId
HAVING currentIntervale IS NOT NULL";

        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        #$rsm->addScalarResult('instrumentId', 'instrumentId');
        #$rsm->addScalarResult('instrumentName', 'instrumentName');
        $rsm->addScalarResult('currentCase', 'currentCase');
        $rsm->addScalarResult('currentString', 'currentString');
        $rsm->addScalarResult('currentDigit', 'currentDigit');
        $rsm->addScalarResult('currentDigitA', 'currentDigitA');
        $rsm->addScalarResult('currentOctave', 'currentOctave');
        $rsm->addScalarResult('wsName', 'wsName');
        $rsm->addScalarResult('currentIntervale', 'currentIntervale');

        $query = $em->createNativeQuery($sql, $rsm);

        $query->setParameter('instrumentId',$id);
        $query->setParameter('wsName',$ws[0]["name"]);
        $query->setParameter('rootDigitId',$ws[0]["digit"]);
        $query->setParameter('scaleId',$s);

        return $query->getScalarResult();
    }
    /*
     * Return the instrument matrice
     *
     */
    public function getMatrice($id,$r = null ,$s = null){
        $sql = "
SELECT
    instrument.id AS instrumentId,
    instrument.name AS instrumentName,
    oneCase AS currentCase,
    instrument_string.pos AS currentString,

    ROUND(((12 * octave + (d2.value + oneCase)) - MOD((d2.value + oneCase), 12)) / 12) AS currentOctave,
    (12 * octave + (d2.value + oneCase)) AS currentDigitA,
     MOD((d2.value + oneCase ), 12) AS currentDigit,
     (select infoTone from digit where value = MOD((d2.value + oneCase ), 12)) as currentInfoTone
FROM
    instrument instrument
        LEFT JOIN
    instrument_string instrument_string ON instrument_string.instrument = instrument.id
        JOIN
    (SELECT 0 oneCase UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION SELECT 20 UNION SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24) virtualCase
        LEFT JOIN
    digit d2 ON instrument_string.digit = d2.id
WHERE
    instrument.id = :instrument_id";

        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('instrumentId', 'instrumentId');
        $rsm->addScalarResult('instrumentName', 'instrumentName');
        $rsm->addScalarResult('currentCase', 'currentCase');
        $rsm->addScalarResult('currentString', 'currentString');
        $rsm->addScalarResult('currentDigit', 'currentDigit');
        $rsm->addScalarResult('currentDigitA', 'currentDigitA');
        $rsm->addScalarResult('currentOctave', 'currentOctave');
        $rsm->addScalarResult('currentInfoTone', 'currentInfoTone');

        $query = $em->createNativeQuery($sql, $rsm);

        $query->setParameter('instrument_id',$id);

        return $query->getScalarResult();
    }
}
